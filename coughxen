import discord
import json
from discord.ext import commands

# Initialize your bot
client = commands.Bot(command_prefix="!")

# Load user data (experience, level, etc.) from a JSON file
async def get_level_data():
    with open("users.json", "r") as file:
        return json.load(file)

# Update user data when they join the server
async def update_data(users, user):
    if str(user.id) not in users:
        users[str(user.id)] = {"experience": 0, "level": 1}

# Add experience points to a user
async def add_experience(users, user, exp):
    users[str(user.id)]["experience"] += exp

# Check if a user has leveled up
async def level_up(users, user, message):
    experience = users[str(user.id)]["experience"]
    current_level = users[str(user.id)]["level"]
    new_level = int(experience ** (1 / 4))

    if current_level < new_level:
        await message.channel.send(f"{user.mention} has leveled up to level {new_level}")
        users[str(user.id)]["level"] = new_level

# Event: When a member joins the server
@client.event
async def on_member_join(member):
    with open("users.json", "r") as f:
        users = json.load(f)
    await update_data(users, member)
    with open("users.json", "w") as f:
        json.dump(users, f)

# Event: When a message is sent
@client.event
async def on_message(message):
    if not message.author.bot:
        with open("users.json", "r") as f:
            users = json.load(f)
        await update_data(users, message.author)
        await add_experience(users, message.author, 5)
        await level_up(users, message.author, message)
        with open("users.json", "w") as f:
            json.dump(users, f)
    await client.process_commands(message)

# Command: Check your own level
@client.command()
async def level(ctx, member: discord.Member = None):
    if not member:
        id = ctx.message.author.id
    else:
        id = member.id

    users = await get_level_data()
    level = users[str(id)]["level"]
    await ctx.send(f"You are at level {level}!")

# Run the bot
client.run("YOUR_BOT_TOKEN")

